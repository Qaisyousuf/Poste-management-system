@model OPMS.ViewModels.SWorkerPageVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/OPMSAdmin/Views/Shared/_Layout.cshtml";
}
<div class="card card-cascade narrower blue lighten-5">

    <!-- Card image -->
    <div class="view view-cascade gradient-card-header  blue lighten-1 text-white">

        <!-- Title -->
        <h4 class="text-white">Update The social worker page</h4>
        <!-- Subtitle -->
    </div>

    <!-- Card content -->
    <div class="card-body card-body-cascade text-center">

        <hr />

        <h4 class="light-blue-text  ">Are you sure you want to update the <button class="btn btn-info btn-sm  btn-rounded"><i class="fas fa-edit pr-2"></i> @Model.Title </button> social worker Page ?</h4>


        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.ButtonUrl, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.EditorFor(model => model.ButtonUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ButtonUrl, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.ButtonText, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.EditorFor(model => model.ButtonText, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ButtonText, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.GoogleMapAPIUrl, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.EditorFor(model => model.GoogleMapAPIUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GoogleMapAPIUrl, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.MetaKeywordseSworker, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.EditorFor(model => model.MetaKeywordseSworker, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MetaKeywordseSworker, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.MetaDescriptionSworker, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.EditorFor(model => model.MetaDescriptionSworker, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MetaDescriptionSworker, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.BannerId, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        <div class="checkbox">
                            @Html.DropDownListFor(model => model.BannerId, new SelectList(ViewBag.Banner, "Id", "BTitle"), "-------Sélectionnez les formulaires------", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.BannerId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div class="checkbox">
                        <label>@Html.CheckBoxFor(x => x.IsVisibleToSearchEngineSworker, new { style = "opacity: 1" })<br />@Html.DisplayNameFor(x => x.IsVisibleToSearchEngineSworker)</label>
                    </div>
                </div>
                <div class="form-group ">
                    <div class="checkbox">
                        <label>@Html.CheckBoxFor(x => x.IsSWorkertMetaDataOn, new { style = "opacity: 1" })<br />@Html.DisplayNameFor(x => x.IsSWorkertMetaDataOn)</label>
                    </div>
                </div>
                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.SubContent, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.TextAreaFor(model=>model.SubContent)
                        @Html.ValidationMessageFor(model => model.SubContent, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group md-form offset-1 col-md-9">
                    @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label offset-1" })
                    <div class="offset-3">
                        @Html.TextAreaFor(model => model.Content)
                        @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group md-form offset-3 col-md-9">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="submit" value="Create" class="btn btn-primary"><i class="fas fa-save pr-2"></i> Save</button>  |
                        <a class="btn btn-primary" href="/OPMSAdmin/SWorkerPage/Index"><i class="fas fa-undo-alt pr-2"></i> Back to Menu</a>
                    </div>
                </div>
            </div>
        }


    </div>

</div>


@section AdminCustomCSS{

    <link href="~/Content/AdminCustomCSS.css" rel="stylesheet" />

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>
    <script>
        CKEDITOR.replace("Content")
        CKEDITOR.replace("SubContent")
    </script>
    <script>
        $(document).ready(function () {
            $(".button-collapse").sideNav({
                breakpoint: 1200
            });

            var sideNavScrollbar = document.querySelector('.custom-scrollbar');
            var ps = new PerfectScrollbar(sideNavScrollbar);
            Ps.initialize(el);
        });
    </script>
}